"""Server side, where code is encoding all the line in one symbol
the principle of this code is to encode all the line in one symbol, and then send it to the client
that will add it to database, example:
'Hello WoRlD' : пїЅ

and like this for every file.
also it will check if there's already phrases like that in database, if yes, it will not add it, but give the symbol from database.
if "OverflowError: Python int too large to convert to C int" error:
it will add another byte of info (it will look like: 'Hello WoRlD' : пїЅпїЅ)
"""

import socket
from sqlalchemy import create_engine, String
from sqlalchemy.orm import DeclarativeBase, sessionmaker, Mapped, mapped_column


engine = create_engine("sqlite:///tour3/default.db", echo=False)

Session = sessionmaker(bind=engine)

SERVER_IP = (
    "localhost"  # after, IF it will be in big productions will be changed to ip.
)
MAX = 55295  # Max number for chr() or unicode characters
NW = [
    " ",
    "",
    "\n",
    """
""",
""",
]  # Means NOT WORKING


class Base(DeclarativeBase):
    def createdb(self):
        Base.metadata.create_all(engine)

    def dropdb(self):
        Base.metadata.drop_all(engine)

    def new_phrase(self, string, symbol):
        with Session() as session:
            new_phrase = Database(string=string, symbol=symbol)
            session.add(new_phrase)
            session.commit()

    def removeFromLib(self, phrase):  # Only for me, will not be used in app
        with Session() as session:
            item = session.query(Database).filter_by(string=phrase).first()
            session.delete(item)
            session.commit()

    def selectByPhrase(self, phrase):
        with Session() as session:
            return session.query(Database).filter_by(string=phrase).first()

    def selectBySymbol(self, symbol):
        with Session() as session:
            return session.query(Database).filter_by(symbol=symbol).first()

    def getSymbol(self):
        """gets the id for chr() function. (just la
        """gets the id for chr() function. (just la
        with Session() as session:
            return session.query(Database).order_by(Database.id.desc()).first()


class Database(Base):
    __tablename__ = "database"
    id: Mapped[int] = mapped_column(primary_key=True)
    string: Mapped[str] = mapped_column(
        String(
            99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999
        )
    )
    symbol: Mapped[str] = mapped_column(String(1))


def main():
    db = Base()
    db.createdb()
    sock = socket.socket()
    sock.bind(("", 9090))

    while True:
        sock.listen(1)
        conn, addr = sock.accept()

        print("connected:", addr)
        all = conn.recv(1024).decode().split("")
        mode = all.pop(0)
        data = str()
        for i in all:
            data += i
        if mode == "encode":
            conn.send(encode(da
ta, db))
        elif mode == "decode":
            conn.send(decode(data, db))
        conn.close()


def encode(data: str, db: Base):
    before = (
        str()
    )  # if there's more than one symbol to put, it will be added to this var
    final = str()
    symbol_id = db.getSymbol()
    data = data.split("\n")
    if symbol_id is None:
        symbol_id = 1
        count = 0
    else:
        symbol_id = symbol_id.id + 1
        count = int(symbol_id / MAX)
        symbol_id = symbol_id % MAX

    for i in data:
        if (
            chr(symbol_id) in NW or symbol_id == 13
        ):  # without this there will be error while decoding
            symbol_id = encoding_checker(symbol_id + 1)
        if db.selectByPhrase(i) is not None:
            final += db.selectByPhrase(i).symbol + "\n"
            continue
        try:
            if count != 0:
                before = chr(count)
                final += before
            encoding = chr(symbol_id)
        except:
       
     count += 1
        db.new_phrase(i, encoding)
        symbol_id += 1
        final += encoding + "\n"
    return final.encode()


def encoding_checker(symbol_id):
    if chr(symbol_id) in NW:
        return encoding_checker(symbol_id + 1)
    return symbol_id


def decode(data: str, db: Base):
    finish = str()
    for i in data.split("\n"):
        try:
            finish += db.selectBySymbol(i).string
        except:
            finish += "\n"
        finish += "\n"
    return finish.encode()



